pipeline {
    agent {
        label 'arathi-ubuntu-a'
    }

    environment {
        VAULT_ADDR = 'http://34.228.140.38:8400/'
        SONAR_SCANNER_VERSION = '7.2.0.5079'
    }

    stages {

        /* ── S1: Clean workspace ─────────────────────────────────────────────── */
        stage('Clean Workspace') {
            steps {
                cleanWs()
            }
        }

        /* ── S2: Clone SCM ───────────────────────────────────────────────────── */
        stage('Clone SCM') {
            steps {
                checkout scm
            }
        }

        /* ── S3: Run Gitleaks Scan ───────────────────────────────────────────── */
        stage('Gitleaks Scan') {
            steps {
                sh '''
                set -eux
                if ! command -v gitleaks &> /dev/null; then
                    echo "Installing Gitleaks..."
                    wget -q https://github.com/zricethezav/gitleaks/releases/download/v8.18.1/gitleaks_8.18.1_linux_x64.tar.gz
                    tar -xzf gitleaks_8.18.1_linux_x64.tar.gz
                    chmod +x gitleaks
                    sudo mv gitleaks /usr/local/bin/
                fi

                echo "🔍 Running Gitleaks scan..."
                set +e
                gitleaks detect --source python_app --no-git --verbose --report-path gitleaks-report.json
                result=$?
                set -e

                if [ "$result" -ne 0 ]; then
                    echo "❌ Gitleaks found potential leaks!"
                    exit 1
                else
                    echo "✅ No leaks found."
                fi
                '''
            }
        }

        /* ───────────  Python Tests with Coverage (updated) ─────────── */
        stage('Python Tests with Coverage') {
            steps {
                // Everything happens inside the python_app directory
                dir('python_app') {
                    sh '''
                    set -eux
                    rm -rf venv
                    python3 -m venv venv
                    ./venv/bin/pip install --upgrade pip
                    ./venv/bin/pip install -r requirements.txt

                    # Run tests and create coverage.xml INSIDE python_app folder
                    ./venv/bin/python -m pytest tests/ \
                    --maxfail=1 --disable-warnings -q \
                    --cov=. --cov-report=xml:coverage.xml

                    echo "=== Coverage file created at: ==="
                    # Show exactly where the file is and its size
                    find . -name coverage.xml -exec ls -lh {} \;
                    '''
                }
            }
        }

        /* ── S4: Run SonarQube Analysis ──────────────────────────────────────── */
        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv(credentialsId: 'arathi-sonar-token', installationName: 'arathi-sq') {
                    sh '''#!/bin/bash
                    set -eux
                    echo "=== SonarQube Installation ==="
                    export SONAR_SCANNER_HOME=$HOME/.sonar/sonar-scanner-${SONAR_SCANNER_VERSION}-linux-x64
                    if [ ! -d "$SONAR_SCANNER_HOME" ]; then
                        mkdir -p $HOME/.sonar
                        curl -sSLo $HOME/.sonar/sonar-scanner.zip \
                          https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-${SONAR_SCANNER_VERSION}-linux-x64.zip
                        unzip -oq $HOME/.sonar/sonar-scanner.zip -d $HOME/.sonar
                    fi
                    export PATH=$SONAR_SCANNER_HOME/bin:$PATH

                    echo "=== Running SonarQube Scanner ==="
                    sonar-scanner \
                      -Dsonar.organization=arathipm \
                      -Dsonar.projectKey=ArathiPM_DevSecOps-Integration \
                      -Dsonar.host.url=$SONAR_HOST_URL \
                      -Dsonar.sources=. \
                      -Dsonar.python.coverage.reportPaths=coverage.xml \
                      -Dsonar.exclusions=**/venv/**,**/__pycache__/**,**/tests/** \
                      -Dsonar.token=$SONAR_AUTH_TOKEN
                    '''
                }
            }
        }

        /* ────────────────  S5: Quality Gate  ─────────────── */
        stage('Quality Gate') {
            steps {
                script {
                    timeout(time: 2, unit: 'MINUTES') {
                        def qg = waitForQualityGate()
                        echo "Quality Gate status: ${qg.status}"
                        if (qg.status != 'OK') {
                            error "❌ Pipeline failed due to Quality Gate failure: ${qg.status}"
                        }
                    }
                }
            }
        }

        /* ── S6: Docker Build for the Python App ─────────────────────────────── */
        stage('Docker Build for Python App') {
            steps {
                sh '''
                echo "🧹 Cleaning up any previous containers/images"
                docker rm -f py-app || true
                docker rmi -f flask-vault-app:latest || true

                echo "🐳 Building new Docker image..."
                docker build -t flask-vault-app:latest python_app
                '''
            }
        }

        /* ── S7: Trivy Image Scan ────────────────────────────────────────────── */
        stage('Trivy Image Scan') {
            steps {
                sh '''
                echo "🔎 Running Trivy vulnerability scan..."
                mkdir -p reports
                docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
                    -v $(pwd)/reports:/reports aquasec/trivy:latest image \
                    --format html \
                    --output /reports/trivy-report.html \
                    flask-vault-app:latest
                '''
            }
            post {
                always {
                    archiveArtifacts artifacts: 'reports/trivy-report.html', fingerprint: true
                }
            }
        }
    }
}